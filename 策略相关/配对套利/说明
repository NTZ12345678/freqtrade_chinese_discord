📌 pair_trading_get_para_V1_J_price_0723

一个基于 Freqtrade 框架的 加密货币配对交易参数生成器。
该策略不会直接生成买卖信号，而是通过 协整回归 + 残差分析 动态计算配对交易参数，并写入外部配置文件，供真实交易策略调用。

🚀 功能特点

支持做空 (can_short=True)：可用于双向套利。

配对分析：自动对白名单中的币对进行两两配对，计算协整关系。

参数计算：

协整回归参数：截距 c、斜率 gamma

残差 Z-score：z_mean、z_std、动态 z 分数序列

半衰期（Half-life）：衡量残差均值回归速度

一致性评分（Consistency Score）：残差穿越零点的规律性

相关系数（Correlation）

ADF 单位根检验（pvalue、adfstat）

动态更新配置文件：

将计算结果写入 user_data/config/future_pair_pairing_run_0723.json

后续运行的策略可直接读取这些参数，用于生成买卖信号

日志记录：对关键参数（半衰期、相关性等）进行日志输出，方便调试和分析。


📊 核心算法流程

加载数据：获取白名单内所有交易对的 5m K线。

两两配对：对 N 个交易对执行 N*(N-1) 次配对回归。

协整检验：

使用 statsmodels.OLS 做回归，得到残差序列。

计算残差 Z-score（均值、标准差）。

使用 ADF 单位根检验残差的平稳性。

统计特征计算：

半衰期（均值回复快慢）

一致性分数（残差穿越次数稳定性）

残差 Z-score 穿越 ±1 次数

保存结果：以字典形式写入配置 JSON 文件，供其他策略模块使用。


📂 配置文件示例

运行后会生成 user_data/config/future_pair_pairing_run_0723.json，包含每个配对的参数，例如：

{
    "pvalue_dict": {
        "BTC/USDT_ETH/USDT_pvalue": 0.015
    },
    "gamma_dict": {
        "BTC/USDT_ETH/USDT_gamma": 0.98
    },
    "z_mean_dict": {
        "BTC/USDT_ETH/USDT_z_mean": -0.002
    },
    "z_std_dict": {
        "BTC/USDT_ETH/USDT_z_std": 0.045
    },
    "half_life_dict": {
        "BTC/USDT_ETH/USDT_half_life": 120.5
    },
    "corr_dict": {
        "BTC/USDT_ETH/USDT_corr": 0.91
    },
    "log_close_dict": {
        "BTC/USDT_log_close": 61000.0,
        "ETH/USDT_log_close": 3400.0
    }
}

⚙️ 使用方式

在 user_data/strategies/ 下放置 pair_trading_get_para_V1_J_price_0723.py。

修改 config.json，将交易对白名单配置好，例如：

"pair_whitelist": [
    "BTC/USDT",
    "ETH/USDT",
    "BNB/USDT"
]



📈 Pair Trading Run Strategy (V1_J_price_0811)
🔹 策略简介

pair_trading_run_V1_J_price_0811 是基于 统计套利（Pairs Trading） 思路设计的实盘运行策略。
它与 pair_trading_get_para_V1_J_price_0723 配合使用：

0723 策略：负责分析市场数据，计算协整参数、残差、半衰期、ADF检验、Z-score 等统计指标，并写入配置文件。

0811 策略：加载这些参数，动态筛选交易配对，并在实盘中执行配对交易。

核心思想：

通过协整回归和残差分析，找到价格走势相关性强的交易对。

使用 Z-score 偏离来判断入场/出场信号。

保持资金中性（Dollar Neutrality），降低市场系统性风险。

🔹 策略特性
✅ 动态配对池管理

每 30天 更新一次配对池（可调节 update_interval）。

按以下多层筛选条件逐步过滤配对：

P值检验（协整关系显著，pvalue ≤ 0.0001）

Z-Mean 靠近零（残差均值接近 0）

Z-Cross Zero Count（残差穿越次数 ≥ 800，保证均值回复特性）

ADF 平稳性检验（ADFstat < -3.0）

半衰期（half-life < 700）

最终得到稳定的配对，并且避免同一币种重复出现在多个配对中。



✅ 入场逻辑

以 Z-score 偏离 为核心信号：

Z > Zscore_entry (默认=1) → 做空强势币，做多弱势币。

Z < -Zscore_entry → 做多强势币，做空弱势币。

结合 enter_tag 绑定配对，确保一组配对同时建仓。

✅ 出场逻辑

三类出场条件：

均值回复：Z-score 回到 Zscore_exit (默认=0.8) 附近，平仓。

盈利平仓：当配对整体盈利超过 0.01 * leverage，立即止盈。

动态风控：当组合浮亏超过资金阈值（liquidity ratio ≤ -1），触发强制退出。

✅ 风控机制


动态配对锁定：已有持仓的配对在更新配对池时保留，不会被替换。

资金分散：配对数量受 max_open_trades/2 限制，避免过度集中风险。

🔹 参数说明
参数名	默认值	说明
Zscore_entry	1.0	入场阈值
Zscore_exit	0.8	出场阈值
Zscore_stop	3.0	止损阈值
min_consistency_score	0.0002	一致性评分最小值
half_life < 700	—	过滤长周期回归
free_usdt = 0.6 * 总资产	—	使用资金比例
leverage1	10	默认杠杆倍数
🔹 使用方法

运行 pair_trading_get_para_V1_J_price_0723，生成参数文件：

user_data/config/future_pair_pairing_run_0723.json


加载 pair_trading_run_V1_J_price_0811，自动读取该配置。

策略将自动筛选交易对，进行配对套利交易。




Pair Trading 策略优化 ToDoList ✅
📊 信号优化

 将 静态 Z-score 买入 改为 动态回归趋势的 Z-score 买入（均值、滑动窗口等已尝试，需要寻找更稳健的方案）。

 在 买入时加入机器学习模型 对 Z-score 信号进行辅助判断。

 探索 不依赖协整 的替代方法（卡尔曼滤波已尝试，效果一般；查阅其他论文中的稳定序列方法）。

📈 仓位 & 入场优化

 设计 更合理的加仓点位（避免盲目加仓，探索分批建仓/价格区间加仓）。

 做多/做空时，允许 更大盈利空间的入场范围（例如做多目标价为 10，9.x 也可接受）。

 为 交易次数多 & 回归速度快的币对 分配更多资金和更高杠杆。

⚙️ 参数与周期管理

 静态参数优化：

 保留历史表现优秀的参数组合，下次更新时直接沿用。

 研究 不同训练周期的参数稳定性（已测 1 周–3 年，2 个月效果较好但风险高）。

 支持 动态参数更新机制（避免手动更新，但需优化数据结构和回测效率）。

🧩 数据与技术改进

 修改源码，尝试 聚合更短时间的 K 线，提升信号灵敏度。

 优化 回测逻辑与数据结构，减少动态参数下的运行时长。

🔗 多资产扩展

 从 两币配对扩展到多币对冲（如做多 BTC，同时做空 ETH、BNB、SOL），需要重新设计买入、卖出和加仓逻辑。


